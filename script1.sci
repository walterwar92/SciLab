// Функция для представления ОДУ в виде системы первого порядка
function dxdt = f(t, X)
    // X(1) = y, X(2) = y', X(3) = y''
    dxdt = [X(2); X(3); (10 - X(1) - 3.5*X(2) - 28*X(3)) / 8];
endfunction

// Метод Адамса-Мултона 1-го порядка
function [T, Y] = adams_moulton_1(f, t0, tf, X0, h)
    N = int((tf - t0) / h); // Количество шагов
    T = linspace(t0, tf, N + 1);
    Y = zeros(3, N + 1); // Храним y, y', y''

    // Начальные условия
    Y(:,1) = X0;

    // Итерационный процесс
    for n = 1:N
        t_n = T(n);
        X_n = Y(:,n);

        // Предсказание методом Эйлера
        X_pred = X_n + h * f(t_n, X_n);

        // Итерационное уточнение (неявный метод)
        for k = 1:5
            X_pred = X_n + h * f(T(n+1), X_pred);
        end

        Y(:,n+1) = X_pred;
    end
endfunction

// Задаем параметры
t0 = 0;
tf = 100;
h = 0.1; // Можно уменьшить, если будет неустойчивость
X0 = [0; 0; 0]; // y(0) = 0, y'(0) = 0, y''(0) = 0

// Запуск метода
[T, Y] = adams_moulton_1(f, t0, tf, X0, h);

// Сохранение данных в файл для передачи в вашу программу
csvWrite([T', Y(1,:)'], "output.csv");

// Вывод в консоль для отладки (по необходимости)
disp("Решение записано в output.csv");
